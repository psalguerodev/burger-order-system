AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Resources:
  # API Gateway para recibir las órdenes
  BurgerOrderApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: BurgerOrderApi
      StageName: Prod

  # DynamoDB para almacenar las órdenes
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: OrdersTable
      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # Lambda para validar la orden
  ValidateOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: validateOrder.handler
      CodeUri: ../lambda-functions/
      Runtime: nodejs18.x
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          EVENT_BUS_NAME: !Ref BurgerOrderEventBus
      Events:
        ValidateOrderApi:
          Type: Api
          Properties:
            Path: /validate-order
            Method: post
            RestApiId: !Ref BurgerOrderApi

  # Lambda para procesar la orden
  ProcessOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: processOrder.handler
      CodeUri: ../lambda-functions/
      Runtime: nodejs18.x
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          EVENT_BUS_NAME: !Ref BurgerOrderEventBus

  # Lambda para validar inventario
  CheckInventoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: checkInventory.handler
      CodeUri: ../lambda-functions/
      Runtime: nodejs18.x
      MemorySize: 128
      Timeout: 10

  # Lambda para preparar la orden
  PrepareOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: prepareOrder.handler
      CodeUri: ../lambda-functions/
      Runtime: nodejs18.x
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: OrdersTable

  # Lambda para gestión de envíos
  ManageShippingFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: manageShipping.handler
      CodeUri: ../lambda-functions/
      Runtime: nodejs18.x
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: OrdersTable
          SNS_TOPIC_ARN: !Ref ShippingNotificationTopic

  # Lambda para notificar al usuario
  NotifyUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: notifyUser.handler
      CodeUri: ../lambda-functions/
      Runtime: nodejs18.x
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref UserNotificationTopic

  # Lambda para log de errores
  LogErrorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: logError.handler
      CodeUri: ../lambda-functions/
      Runtime: nodejs18.x
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          LOG_GROUP_NAME: !Ref ErrorLogGroup
          LOG_STREAM_NAME: !Ref ErrorLogStream

  # EventBridge para manejar eventos
  BurgerOrderEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: BurgerOrderEventBus

  ShippingNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: ShippingNotificationTopic

  UserNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: UserNotificationTopic

  
  # CloudWatch Logs Group para errores
  ErrorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/LogErrorFunction
      RetentionInDays: 7

  # CloudWatch Logs Stream para errores
  ErrorLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref ErrorLogGroup
      LogStreamName: ErrorStream

  # Step Function para manejar el flujo de procesamiento de la orden
  BurgerOrderStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionUri: ../step-functions/stateMachine.asl.json
      RoleArn: !GetAtt StepFunctionExecutionRole.Arn

  StepFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "states.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "StepFunctionExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
